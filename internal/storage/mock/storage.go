// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/Orendev/shortener/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockShortLinkStorage is a mock of ShortLinkStorage interface.
type MockShortLinkStorage struct {
	ctrl     *gomock.Controller
	recorder *MockShortLinkStorageMockRecorder
}

// MockShortLinkStorageMockRecorder is the mock recorder for MockShortLinkStorage.
type MockShortLinkStorageMockRecorder struct {
	mock *MockShortLinkStorage
}

// NewMockShortLinkStorage creates a new mock instance.
func NewMockShortLinkStorage(ctrl *gomock.Controller) *MockShortLinkStorage {
	mock := &MockShortLinkStorage{ctrl: ctrl}
	mock.recorder = &MockShortLinkStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortLinkStorage) EXPECT() *MockShortLinkStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockShortLinkStorage) Add(ctx context.Context, model *models.ShortLink) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, model)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockShortLinkStorageMockRecorder) Add(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockShortLinkStorage)(nil).Add), ctx, model)
}

// Close mocks base method.
func (m *MockShortLinkStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShortLinkStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShortLinkStorage)(nil).Close))
}

// GetByCode mocks base method.
func (m *MockShortLinkStorage) GetByCode(ctx context.Context, code string) (*models.ShortLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", ctx, code)
	ret0, _ := ret[0].(*models.ShortLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockShortLinkStorageMockRecorder) GetByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockShortLinkStorage)(nil).GetByCode), ctx, code)
}

// Ping mocks base method.
func (m *MockShortLinkStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockShortLinkStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockShortLinkStorage)(nil).Ping), ctx)
}

// UUID mocks base method.
func (m *MockShortLinkStorage) UUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// UUID indicates an expected call of UUID.
func (mr *MockShortLinkStorageMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockShortLinkStorage)(nil).UUID))
}
