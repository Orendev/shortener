// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/storage.go

// Package mockStore is a generated GoMock package.
package mockStore

import (
	context "context"
	reflect "reflect"

	models "github.com/Orendev/shortener/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// DeleteFlagBatch mocks base method.
func (m *MockStorage) DeleteFlagBatch(ctx context.Context, codes []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlagBatch", ctx, codes, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlagBatch indicates an expected call of DeleteFlagBatch.
func (mr *MockStorageMockRecorder) DeleteFlagBatch(ctx, codes, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlagBatch", reflect.TypeOf((*MockStorage)(nil).DeleteFlagBatch), ctx, codes, userID)
}

// GetByCode mocks base method.
func (m *MockStorage) GetByCode(ctx context.Context, code string) (*models.ShortLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", ctx, code)
	ret0, _ := ret[0].(*models.ShortLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockStorageMockRecorder) GetByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockStorage)(nil).GetByCode), ctx, code)
}

// GetByID mocks base method.
func (m *MockStorage) GetByID(ctx context.Context, id string) (*models.ShortLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.ShortLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStorageMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorage)(nil).GetByID), ctx, id)
}

// GetByOriginalURL mocks base method.
func (m *MockStorage) GetByOriginalURL(ctx context.Context, originalURL string) (*models.ShortLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", ctx, originalURL)
	ret0, _ := ret[0].(*models.ShortLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockStorageMockRecorder) GetByOriginalURL(ctx, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockStorage)(nil).GetByOriginalURL), ctx, originalURL)
}

// InsertBatch mocks base method.
func (m *MockStorage) InsertBatch(ctx context.Context, models []models.ShortLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBatch", ctx, models)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBatch indicates an expected call of InsertBatch.
func (mr *MockStorageMockRecorder) InsertBatch(ctx, models interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBatch", reflect.TypeOf((*MockStorage)(nil).InsertBatch), ctx, models)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// Save mocks base method.
func (m *MockStorage) Save(ctx context.Context, model models.ShortLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), ctx, model)
}

// ShortLinksByUserID mocks base method.
func (m *MockStorage) ShortLinksByUserID(ctx context.Context, userID string, limit int) ([]models.ShortLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortLinksByUserID", ctx, userID, limit)
	ret0, _ := ret[0].([]models.ShortLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortLinksByUserID indicates an expected call of ShortLinksByUserID.
func (mr *MockStorageMockRecorder) ShortLinksByUserID(ctx, userID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortLinksByUserID", reflect.TypeOf((*MockStorage)(nil).ShortLinksByUserID), ctx, userID, limit)
}

// UpdateBatch mocks base method.
func (m *MockStorage) UpdateBatch(ctx context.Context, models []models.ShortLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", ctx, models)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockStorageMockRecorder) UpdateBatch(ctx, models interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockStorage)(nil).UpdateBatch), ctx, models)
}
