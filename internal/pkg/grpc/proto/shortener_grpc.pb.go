// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortenerService_GetAPIUserUrls_FullMethodName = "/grpcshortener.ShortenerService/GetAPIUserUrls"
	ShortenerService_GetAPIStats_FullMethodName    = "/grpcshortener.ShortenerService/GetAPIStats"
	ShortenerService_SaveAPIShorten_FullMethodName = "/grpcshortener.ShortenerService/SaveAPIShorten"
	ShortenerService_Ping_FullMethodName           = "/grpcshortener.ShortenerService/Ping"
)

// ShortenerServiceClient is the client API for ShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerServiceClient interface {
	GetAPIUserUrls(ctx context.Context, in *APIUserUrlsRequest, opts ...grpc.CallOption) (*APIUserUrlsResponse, error)
	GetAPIStats(ctx context.Context, in *APIStatsRequest, opts ...grpc.CallOption) (*APIStatsResponse, error)
	SaveAPIShorten(ctx context.Context, in *APIShortenRequest, opts ...grpc.CallOption) (*APIShortenResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type shortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerServiceClient(cc grpc.ClientConnInterface) ShortenerServiceClient {
	return &shortenerServiceClient{cc}
}

func (c *shortenerServiceClient) GetAPIUserUrls(ctx context.Context, in *APIUserUrlsRequest, opts ...grpc.CallOption) (*APIUserUrlsResponse, error) {
	out := new(APIUserUrlsResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetAPIUserUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetAPIStats(ctx context.Context, in *APIStatsRequest, opts ...grpc.CallOption) (*APIStatsResponse, error) {
	out := new(APIStatsResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetAPIStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) SaveAPIShorten(ctx context.Context, in *APIShortenRequest, opts ...grpc.CallOption) (*APIShortenResponse, error) {
	out := new(APIShortenResponse)
	err := c.cc.Invoke(ctx, ShortenerService_SaveAPIShorten_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ShortenerService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServiceServer is the server API for ShortenerService service.
// All implementations must embed UnimplementedShortenerServiceServer
// for forward compatibility
type ShortenerServiceServer interface {
	GetAPIUserUrls(context.Context, *APIUserUrlsRequest) (*APIUserUrlsResponse, error)
	GetAPIStats(context.Context, *APIStatsRequest) (*APIStatsResponse, error)
	SaveAPIShorten(context.Context, *APIShortenRequest) (*APIShortenResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedShortenerServiceServer()
}

// UnimplementedShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServiceServer struct {
}

func (UnimplementedShortenerServiceServer) GetAPIUserUrls(context.Context, *APIUserUrlsRequest) (*APIUserUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIUserUrls not implemented")
}
func (UnimplementedShortenerServiceServer) GetAPIStats(context.Context, *APIStatsRequest) (*APIStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIStats not implemented")
}
func (UnimplementedShortenerServiceServer) SaveAPIShorten(context.Context, *APIShortenRequest) (*APIShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAPIShorten not implemented")
}
func (UnimplementedShortenerServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenerServiceServer) mustEmbedUnimplementedShortenerServiceServer() {}

// UnsafeShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServiceServer will
// result in compilation errors.
type UnsafeShortenerServiceServer interface {
	mustEmbedUnimplementedShortenerServiceServer()
}

func RegisterShortenerServiceServer(s grpc.ServiceRegistrar, srv ShortenerServiceServer) {
	s.RegisterService(&ShortenerService_ServiceDesc, srv)
}

func _ShortenerService_GetAPIUserUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUserUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetAPIUserUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetAPIUserUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetAPIUserUrls(ctx, req.(*APIUserUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetAPIStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetAPIStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetAPIStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetAPIStats(ctx, req.(*APIStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_SaveAPIShorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).SaveAPIShorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_SaveAPIShorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).SaveAPIShorten(ctx, req.(*APIShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerService_ServiceDesc is the grpc.ServiceDesc for ShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcshortener.ShortenerService",
	HandlerType: (*ShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIUserUrls",
			Handler:    _ShortenerService_GetAPIUserUrls_Handler,
		},
		{
			MethodName: "GetAPIStats",
			Handler:    _ShortenerService_GetAPIStats_Handler,
		},
		{
			MethodName: "SaveAPIShorten",
			Handler:    _ShortenerService_SaveAPIShorten_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShortenerService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
